import os
import time
import httpx
from datetime import datetime
from supabase import create_client
from timezonefinder import TimezoneFinder
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
tf = TimezoneFinder()

# –†–∞—Å—á—ë—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
def calculate_distance(lat1, lon1, lat2, lon2):
    from math import radians, cos, sin, sqrt, atan2
    R = 6371e3  # –º–µ—Ç—Ä–æ–≤

    œÜ1 = radians(lat1)
    œÜ2 = radians(lat2)
    ŒîœÜ = radians(lat2 - lat1)
    ŒîŒª = radians(lon2 - lon1)

    a = sin(ŒîœÜ/2)**2 + cos(œÜ1)*cos(œÜ2)*sin(ŒîŒª/2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    return R * c  # –≤ –º–µ—Ç—Ä–∞—Ö

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def notify_nearby_users():
    try:
        now_ts = int(time.time() * 1000)
        users = supabase.table("users").select("*").execute().data

        online_users = [
            u for u in users
            if u.get("status") == "online" and isinstance(u.get("online_until"), int) and u["online_until"] > now_ts
        ]

        for user in users:
            if not user.get("latitude") or not user.get("longitude"):
                continue

            if not user.get("chat_id"):
                continue

            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            tz_name = tf.timezone_at(lat=user["latitude"], lng=user["longitude"]) or "UTC"
            tz = pytz.timezone(tz_name)
            user_time = datetime.now(tz)

            if user_time.hour < 17:
                continue  # —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 17:00 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏

            last_notified = user.get("last_notified")
            if last_notified:
                last_dt = datetime.fromtimestamp(last_notified / 1000, tz)
                if last_dt.date() == user_time.date():
                    continue  # —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω —Å–µ–≥–æ–¥–Ω—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—è–¥–æ–º –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            nearby_found = False
            for other in online_users:
                if other["chat_id"] == user["chat_id"]:
                    continue
                if not other.get("latitude") or not other.get("longitude"):
                    continue

                dist = calculate_distance(
                    user["latitude"], user["longitude"],
                    other["latitude"], other["longitude"]
                )

                if dist <= 30000:
                    nearby_found = True
                    break

            if nearby_found:
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    async with httpx.AsyncClient() as client:
                        await client.post(
                            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                            json={
                                "chat_id": user["chat_id"],
                                "text": "üëã –†—è–¥–æ–º —Å –≤–∞–º–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫ –æ–Ω–ª–∞–π–Ω! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
                            }
                        )

                    # –û–±–Ω–æ–≤–ª—è–µ–º last_notified
                    supabase.table("users").update({
                        "last_notified": int(time.time() * 1000)
                    }).eq("chat_id", user["chat_id"]).execute()

                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user['chat_id']}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ notify_nearby_users: {e}")

async def send_daily_summary():
    try:
        now = datetime.utcnow()
        yesterday = now.date().toordinal() - 1

        users = supabase.table("users").select("*").execute().data

        for user in users:
            if not user.get("latitude") or not user.get("longitude") or not user.get("chat_id"):
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
            tz_name = tf.timezone_at(lat=user["latitude"], lng=user["longitude"]) or "UTC"
            tz = pytz.timezone(tz_name)
            local_time = datetime.now(tz)

            if not (9 <= local_time.hour < 12):
                continue  # –¢–æ–ª—å–∫–æ —Å 9 –¥–æ 12 –ø–æ –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            last_summary = user.get("last_summary_sent")
            if last_summary:
                last_dt = datetime.fromtimestamp(last_summary / 1000, tz)
                if last_dt.date() == now.date():
                    continue

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω –≤—á–µ—Ä–∞
            found = False
            for other in users:
                if other["chat_id"] == user["chat_id"]:
                    continue
                if not other.get("latitude") or not other.get("longitude"):
                    continue
                if not isinstance(other.get("online_until"), int):
                    continue

                dt = datetime.utcfromtimestamp(other["online_until"] / 1000)
                if dt.date().toordinal() != yesterday:
                    continue

                dist = calculate_distance(
                    user["latitude"], user["longitude"],
                    other["latitude"], other["longitude"]
                )

                if dist <= 30000:
                    found = True
                    break

            if found:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º
                try:
                    async with httpx.AsyncClient() as client:
                        await client.post(
                            f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage",
                            json={
                                "chat_id": user["chat_id"],
                                "text": "üìç –í—á–µ—Ä–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏ –±—ã–ª –∫—Ç–æ-—Ç–æ –æ–Ω–ª–∞–π–Ω. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è!"
                            }
                        )

                    supabase.table("users").update({
                        "last_summary_sent": int(time.time() * 1000)
                    }).eq("chat_id", user["chat_id"]).execute()

                    print(f"üì¨ –†—è–¥–æ–º –∫—Ç–æ-—Ç–æ –±—ã–ª ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user['chat_id']}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ summary-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_daily_summary: {e}")